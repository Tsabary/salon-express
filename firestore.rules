rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /followers/{mentor}{
      allow read: if true;
      allow write, delete: if false;
    }

    match /rooms/{room}{
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.user_ID;
      allow update: if true; // It's true because even when a non logged in user enters a room we need to update the last active field
      allow delete: if request.auth.uid == resource.data.user_ID;
    }

    match /floors/{floor}{
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.user_ID;
      allow update: if request.auth.uid == request.resource.data.user_ID; 
      allow delete: if request.auth.uid == resource.data.user_ID;
    }

    match /floor_rooms/{room}{
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.user_ID;
      allow update: if request.auth.uid == request.resource.data.user_ID; 
      allow delete: if request.auth.uid == resource.data.user_ID;
    }

    match /floor_plans/{room}{
      allow read, write, delete: if true;
    }

    match /multiverses/{portal}{
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if true;
      allow delete: if false;
    }
    
    match /active_channels/{room}{
      allow read: if true;
      allow create: if get(/databases/$(database)/documents/rooms/$(room)).data.user_ID == request.auth.uid; // need to check that it's the admin
      allow update: if get(/databases/$(database)/documents/rooms/$(room)).data.user_ID == request.auth.uid; // need to check that it's the admin
      allow delete: if get(/databases/$(database)/documents/rooms/$(room)).data.user_ID == request.auth.uid; // need to check that it's the admin
    }

    match /events/{event}{
      allow read: if true;
      allow create: if get(/databases/$(database)/documents/rooms/$(request.resource.data.room_ID)).data.user_ID == request.auth.uid; // need to check that it's the admin
      allow update: if get(/databases/$(database)/documents/rooms/$(request.resource.data.room_ID)).data.user_ID == request.auth.uid; // need to check that it's the admin
      allow delete: if get(/databases/$(database)/documents/rooms/$(request.resource.data.room_ID)).data.user_ID == request.auth.uid; // need to check that it's the admin
    }

    match /comments/{room}{
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.user_ID;
      allow update: if request.auth.uid == resource.data.user_ID;
      allow delete: if request.auth.uid == resource.data.user_ID;
    }

    match /tags/{tag}{
      allow read: if true;
      allow write, delete: if false;
    }
  
    match /tags_count/{tag}{
      allow read: if true;
      allow write, delete: if false;
    }

    match /templates/{template}{
      allow read, delete: if request.auth.uid == resource.data.user_ID;
      allow write: if request.auth.uid == request.resource.data.user_ID;
    }

    match /users/{userID}{
      allow read: if true;
      allow write: if request.auth.uid == request.resource.data.uid;
      allow delete: if false;
    }

    match /questions/{uquestionID}{
      allow read: if true;
      allow write: if request.auth.uid == "PPryp7ws2lekKx1mePChgH0Sh3t1";
      allow delete: if false;
    }

  }
}